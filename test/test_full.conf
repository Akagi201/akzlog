# full usage of conf
# 单位大小写不敏感
# 4个小节的顺序不能改变, 依次为: global -> levels -> formats -> rules

# 全局参数[global] 可以忽略不写
# 格式为: (key) = (value)
[global]

# true: zlog_init()将会严格检查所有的格式和规则, 任何错误都会导致zlog_init()失败并且返回-1
# false: zlog_init()会忽略错误的格式和规则
# 该参数默认为true
strict init = true

# 这个选项让zlog能在一段时间间隔后自动重载配置文件. 重载的间隔以每进程写日志的次数来定义.
# 当写日志次数到了一定值后, 内部将会调用zlog_reload()进行重载. 每次zlog_reload()或者zlog_init()之后重新计数累加.
# 因为zlog_reload()是原子性的, 重载失败继续用当前的配置信息, 所以自动重载是安全的. 默认值是0, 自动重载是关闭的.
reload conf period

# zlog在堆上为每个线程申请缓存. "buffer min"是单个缓存的最小值, zlog_init()的时候申请这个长度的内存.
# 写日志的时候, 如果单条日志长度大于缓存, 缓存会自动扩充, 直到到"buffer max". 单条日志再长超过"buffer max"就会被截断.
# 如果"buffer max"是0, 意味着不限制缓存, 每次扩充为原先的2倍, 直到这个进程用完所有内存为止.
# 缓存大小可以加上 KB, MB或GB这些单位. 默认来说"buffer min"是1K, "buffer max"是2MB.
buffer min = 1024
buffer max = 2MB

# 这个选项指定了一个锁文件, 用来保证多进程情况下日志安全转档. zlog会在zlog_init()时候以读写权限打开这个文件.
# 确认你执行程序的用户有权限创建和读写这个文件.
# 默认来说, rotate lock file = self. 在这种情况下, zlog不会创建任何锁文件, 用配置文件作为锁文件.
# fcntl是建议锁, 所以用户可以自由的修改存储他们的配置文件.
# 一般来说, 单个日志文件不会被不同操作系统用户的进程转档, 所以用配置文件作为锁文件是安全的.
# 如果你设置其他路径作为锁文件, 例如/tmp/zlog.lock，zlog会在zlog_init()的时候创建这个文件.
# 如果有多个操作系统用户的进程需要转档同一个日志文件, 确认这个锁文件对于多个用户都可读写. 默认值是/tmp/zlog.lock.
rotate lock file = /tmp/zlog.lock

# 这个参数是缺省的日志格式, 默认值为:
# "%d %V [%p:%F:%L] %m%n"
# 这种格式产生的输出类似这样:
# 2012-02-14 17:03:12 INFO [3758:test_hello.c:39] hello, zlog
default format = "%d.%us %-6V (%c:%F:%L) - %m%n"

# 这个指定了创建日志文件的缺省访问权限. 
# 必须注意的是最后的产生的日志文件的权限为"file perms"& ~umask. 默认为600, 只允许当前用户读写.
file perms = 600

# 在每条规则写了一定次数的日志到文件后, zlog会调用fsync(3)来让操作系统马上把数据写到硬盘.
# 次数是每条规则单独统计的, 并且在zlog_reload()后会被清0.
# 必须指出的是, 在日志文件名是动态生成或者被转档的情况下, zlog不能保证把所有文件都搞定, zlog只fsync()那个时候刚刚write()的文件描述符.
# 这提供了写日志速度和数据安全性之间的平衡.
# 如果你极度在乎安全而不是速度的话, 用同步IO文件, 见5.5.3. 默认值是0, 由操作系统来决定什么时候刷缓存到文件.
fsync period

# 日志等级自定义
# 建议和用户自定义的日志记录宏一起使用, 这一节可以忽略不写.
# 语法为: (level string) = (level int), (syslog level, optional)
# (level int)必须在[1,253]这个范围内, 越大越重要. (syslog level)是可选的, 如果不设默认为LOG_DEBUG.
[levels]
TRACE = 10
CRIT = 130, LOG_CRIT

# 日志格式
# 语法为: (name) = "(actual formats)"
# (name)被后面的规则使用. (name)必须由数字和字母组成, 下划线"_"也算字母.
# (actual format)前后需要有双引号. (actual formats)可以由转换字符组成
# 转换格式串的设计是从C的printf函数里面抄来的. 一个转换格式串由文本字符和转换说明组成.
# 转换格式串用在规则的日志文件路径和输出格式(format)中.
# 你可以把任意的文本字符放到转换格式串里面.
# 每个转换说明都是以百分号(%)打头的, 后面跟可选的宽度修饰符, 最后以转换字符结尾.
# 转换字符决定了输出什么数据, 例如分类名, 级别, 时间日期, 进程号等等. 宽度修饰符控制了这个字段的最大最小宽度, 左右对齐.
# 如: 转换格式串: "%d(%m-%d %T) %-5V [%p:%F:%L] %m%n"
# 源码中写日志语句: zlog_info(c, "hello, zlog");
# 将会输出: 02-14 17:17:42 INFO  [4935:test_hello.c:39] hello, zlog
# 宽度修饰符
# %[-]最小宽度.最大宽度(修饰的类型)
# 时间字符
# 这里是转换字符d支持的时间字符
# 所有字符都是由strftime(2)生成
[formats]
simple = "%m%n"
normal = "%d %m%n"

# 规则
# 描述了日志是怎么被过滤, 格式化以及被输出的. 这节可以忽略不写, 不过这样就没有日志输出了.
# 语法:(category).(level)    (output), (options, optional); (format name, optional)
# 当zlog_init()被调用的时候, 所有规则都会被读到内存中.
# 当zlog_get_category()被调用，规则就被分配给分类.
# 当zlog_reload()被调用的时候, 配置文件会被重新读入, 包括所有的规则, 并且重新计算分类对应的规则.
# 级别匹配
# zlog默认6个级别: DEBUG, INFO, NOTICE, WARN, ERROR, FATAL
# cat.DEBUG意味着任何大于等于DEBUG级别的日志会被输出.
# 配置文件中的级别是大小写不敏感的
# 分类匹配
# 分类必须由数字和字母组成, 下划线"_"也算字母.
# 输出动作
# 语法: [输出], [附加选项, 可选]; [格式名, 可选]
[rules]
default.* > stdout; simple
*.* "%12.2E(HOME)/log/%c.log", 1MB*12; simple
my_.INFO > stderr;
my_cat.!ERROR "/var/log/aa.log"
my_dog.=DEBUG > syslog, LOG_LOCAL0; simple
my_mice.* $user_define


